graphs:

  # The publish/subscribe broker graph
  - id: PubSubBroker
    nodes:
    # Allow communication between graphs
    - id: Broker
      module: timeflux.nodes.zmq
      class: Broker

  # The signal acquisition graph
  - id: acquisition
    nodes:
    - id: bitalino
      # module: timeflux.nodes.random
      # class: Random
      module: timeflux_bitalino.nodes.driver
      class: Bitalino
      params:
        port: COM3
        # port: /dev/tty.BITalino-02-44-DevB
        rate: 1000
        sensors:
          A1: EEG
    - id: pub_bitalino
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: bitalino
    edges:
    - source: bitalino
      target: pub_bitalino
    rate: 50


  # The main processing graph
  - id: Processing
    nodes:
    # Receive EEG signal from the network
    - id: sub_bitalino
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: 
        - bitalino 
    # Continuously buffer the signal
    - id: Rolling
      module: timeflux.nodes.window
      class: Window
      params:
        length: 1
        step: 0.02
    # Compute the power spectral density
    - id: Welch
      module: timeflux_dsp.nodes.spectral
      class: Welch
    # Average the power over band frequencies
    - id: Bands
      module: timeflux_dsp.nodes.spectral
      class: Bands
        # params:
        #   bands: {'delta':[1,4], 'theta':[4,8], 'alpha':[8,12], 'beta': [12,35]}
    # Publish the frequency bands
    - id: PublisherDelta
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: delta
    - id: PublisherTheta
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: theta
    - id: PublisherAlpha
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: alpha
    - id: PublisherBeta
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: beta
    # Connect nodes
    edges:
      - source: sub_bitalino:bitalino
        target: Rolling
      - source: Rolling
        target: Welch
      - source: Welch
        target: Bands
      - source: Bands:theta
        target: PublisherTheta
      - source: Bands:delta
        target: PublisherDelta
      - source: Bands:alpha
        target: PublisherAlpha
      - source: Bands:beta
        target: PublisherBeta
    # Run this graph 30 times per second
    rate: 50

  # The recorder graph
  - id: SaveToFile
    nodes:
    # Receive data streams from the broker
    - id: Subscriber
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
        - delta
        - theta
        - alpha
        - beta
    # Record to file
    - id: Recorder
      module: timeflux.nodes.hdf5
      class: Save
      params: 
        filename: b_calib.hdf5
        path: bands/
    # Connect nodes
    edges:
      - source: Subscriber:delta
        target: Recorder:delta
      - source: Subscriber:theta
        target: Recorder:theta
      - source: Subscriber:alpha
        target: Recorder:alpha
      - source: Subscriber:beta
        target: Recorder:beta
      
    # Update file freq
    rate: 5
  