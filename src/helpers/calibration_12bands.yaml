graphs:

  ##################################
  #  The publish/subscribe broker graph
  ###################################
  - id: PubSubBroker
    nodes:
    # Allow communication between graphs
    - id: Broker
      module: timeflux.nodes.zmq
      class: Broker

  ##################################
  # The signal acquisition graph
  ###################################
  - id: acquisition
    nodes:
    - id: bitalino
      # module: timeflux.nodes.random
      # class: Random
      module: timeflux_bitalino.nodes.driver
      class: Bitalino
      params:
        port: COM3
        # port: /dev/tty.BITalino-F6-81-Bluetoot
        # port: /dev/tty.BITalino-02-44-DevB
        rate: 1000
        sensors:
          A1: EEG
    - id: pub_bitalino
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: bitalino
    edges:
    - source: bitalino
      target: pub_bitalino
    rate: 100


  ##################################
  # The main processing graph
  ###################################
  - id: Processing
    nodes:
    # Receive EEG signal from the network
    - id: sub_bitalino
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: 
        - bitalino 
    # Continuously buffer the signal
    - id: Rolling
      module: timeflux.nodes.window
      class: Window
      params:
        length: 1
        step: 0.5
    # Compute the power spectral density
    - id: Welch
      module: timeflux_dsp.nodes.spectral
      class: Welch
    # Average the power over band frequencies
    - id: Bands
      module: timeflux_dsp.nodes.spectral
      class: Bands
      params:
        bands: {'P0': [3, 5], 'P1': [6, 8], 'P2': [9, 11], 'P3': [12, 14], 'P4': [15, 17], 'P5': [18, 20], 'P6': [21, 23], 'P7': [24, 26], 'P8': [27, 29], 'P9': [30, 32], 'P10': [33, 35], 'P11': [36, 38]}
    # Publish the frequency bands
    - id: Publisher0 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
        topic: P0
    - id: Publisher1 
      module: timeflux.nodes.zmq 
      class: Pub
      params:
        topic: P1 
    - id: Publisher2 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
        topic: P2 
    - id: Publisher3 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
       topic: P3
    - id: Publisher4 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
       topic: P4
    - id: Publisher5 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
        topic: P5
    - id: Publisher6 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
        topic: P6
    - id: Publisher7
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
        topic: P7
    - id: Publisher8 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
        topic: P8
    - id: Publisher9 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
        topic: P9
    - id: Publisher10 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
        topic: P10
    - id: Publisher11 
      module: timeflux.nodes.zmq 
      class: Pub 
      params: 
        topic: P11
    # Connect nodes
    edges:
      - source: sub_bitalino:bitalino
        target: Rolling
      - source: Rolling
        target: Welch
      - source: Welch
        target: Bands
      - source: Bands:P0
        target: Publisher0
      - source: Bands:P1
        target: Publisher1
      - source: Bands:P2
        target: Publisher2
      - source: Bands:P3
        target: Publisher3
      - source: Bands:P4
        target: Publisher4
      - source: Bands:P5
        target: Publisher5
      - source: Bands:P6
        target: Publisher6
      - source: Bands:P6
        target: Publisher6
      - source: Bands:P7
        target: Publisher7
      - source: Bands:P8
        target: Publisher8
      - source: Bands:P9
        target: Publisher9
      - source: Bands:P10
        target: Publisher10
      - source: Bands:P11
        target: Publisher11
    # Run this graph 100 times per second
    rate: 100

  
  ##################################
  # The recorder graph
  ###################################
  - id: SaveToFile
    nodes:
    # Receive data streams from the broker
    - id: Subscriber
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
        - P0
        - P1
        - P2
        - P3
        - P4
        - P5
        - P6
        - P7
        - P8
        - P9
        - P10
        - P11
    # Record to file
    - id: Recorder
      module: timeflux.nodes.hdf5
      class: Save
      params: 
        filename: bands12_calib.hdf5
        path: ./bands/
    # Connect nodes
    edges:  
      - source: Subscriber:P0
        target: Recorder:P0
      - source: Subscriber:P1
        target: Recorder:P1
      - source: Subscriber:P2
        target: Recorder:P2
      - source: Subscriber:P3
        target: Recorder:P3
      - source: Subscriber:P4
        target: Recorder:P4
      - source: Subscriber:P5
        target: Recorder:P5
      - source: Subscriber:P6
        target: Recorder:P6
      - source: Subscriber:P7
        target: Recorder:P7
      - source: Subscriber:P8
        target: Recorder:P8
      - source: Subscriber:P9
        target: Recorder:P9
      - source: Subscriber:P10
        target: Recorder:P10
      - source: Subscriber:P11
        target: Recorder:P11 
    # Update file every few seconds
    rate: 1
  