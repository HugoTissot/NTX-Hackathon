graphs:

  - id: Broker
    nodes:
    - id: proxy
      module: timeflux.nodes.zmq
      class: Broker

  - id: Publisher
    nodes:
    - id: random
      module: timeflux.nodes.random
      class: Random
      params:
        columns: 2
        seed: 1
    - id: add
      module: timeflux_example.nodes.arithmetic
      class: Add
      params:
        value: 1
    - id: pub_before
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: before
    - id: pub_after
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: after
    edges:
    - source: random
      target: add
    - source: random
      target: pub_before
    - source: add
      target: pub_after

  - id: Subscriber
    nodes:
    - id: sub
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: [ before, after ]
    - id: monitor
      module: timeflux_ui.nodes.ui
      class: UI
    edges:
      - source: sub:before
        target: monitor:before
      - source: sub:after
        target: monitor:after

  - id: SaveToFile
    nodes:
    # Receive data streams from the broker
    - id: Save_sub
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
        - before
        - after
    # Record to file
    - id: Recorder
      module: timeflux.nodes.hdf5
      class: Save
      params:
        filename: random_calib.hdf5
        path: ./bands/
    # Connect nodes
    edges:
      - source: Save_sub:before
        target: Recorder:before
      - source: Save_sub:after
        target: Recorder:after
    # Update file every second
    rate: 1
 